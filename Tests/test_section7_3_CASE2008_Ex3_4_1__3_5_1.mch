// Richard St-Denis, Universite de Sherbrooke, 2024.
MODEL test_section7_3_CASE2008_Ex3_4_1__3_5_1

SEES
 //---------------------------------------------------------------------
 // Machine for input data
 //---------------------------------------------------------------------
   CASE2008_Ex3_4_1__3_5_1 /*@file "../DataExamples/CASE2008_Ex3_4_1__3_5_1.mch" */

DEFINITIONS
 //---------------------------------------------------------------------
 // ProB settings
 //---------------------------------------------------------------------
 SET_PREF_MAX_INITIALISATIONS == 1;
 SET_PREF_MAX_OPERATIONS == 1;
 SET_PREF_TIME_OUT == 10000000;
 SET_PREF_SMT == FALSE;
 SET_PREF_KODKOD == FALSE;
 //---------------------------------------------------------------------
 // Import the theory
 //---------------------------------------------------------------------
 "../Theories/SCT_core.def";
 "../Theories/SCT_decentralized.def";
 "LibraryIO.def"

CONSTANTS
 L_G, L_H    // Languages for free and legal behaviors

PROPERTIES
 G_fb : Generator_C_O(G_fb'states,G_fb'events) &
 H_lb : FSA(H_lb'states,H_lb'events) &
 L_G = GetStrings(G_fb,bound) &
 L_H = GetStrings(H_lb,bound)

VARIABLES
 code
INITIALISATION
 code := 0
INVARIANT
 code = 0 or code = 1

OPERATIONS
 FindPartitionForCP2Coobservability =  // this operation is not enabled because K is
  VAR D_L_H_sigma IN                   // not C&P2-coobservable w.r.t. ex. 3.4.1, but
   D_L_H_sigma := D_(L_H,L_G,sigma);   // enabled w.r.t. ex. 3.5.1
    ANY S1, S2 WHERE
     S1 /\ S2 = {} & S1 \/ S2 = E_(L_H,sigma) &
     CPmCoobservability_e(A_d,sigma,L_H,D_L_H_sigma,{S1, S2}) THEN
       code := 1 || PRINT("K is C&P2-coobservable.") ||
                    PRINT(S1) || PRINT(S2) END END;

 FindPartitionForCP3Coobservability =  // this operation is enabled w.r.t. ex. 3.4.1 and
  VAR D_L_H_sigma IN                   // ex. 3.5.1 (since the previous one is enabled
   D_L_H_sigma := D_(L_H,L_G,sigma);   // w.r.t. ex. 3.5.1, it gives the same partition)
    ANY S1, S2, S3 WHERE
     S1 /\ S2 = {} & S1 /\ S3 = {} & S2 /\ S3 = {} & S1 \/ S2 \/ S3 = E_(L_H,sigma) &
     CPmCoobservability_e(A_d,sigma,L_H,D_L_H_sigma,{S1, S2, S3}) THEN
       code := 1 || PRINT("K is C&P3-coobservable.") ||
                    PRINT(S1) || PRINT(S2) || PRINT(S3) END END;

 FindPartitionForDA2Coobservability =  // this operation is not enabled because K is
  VAR E_L_H_sigma IN                   // not D&A2-coobservable w.r.t. ex. 3.5.1, but
   E_L_H_sigma := E_(L_H,sigma);       // enabled w.r.t. ex. 3.4.1
    ANY S1, S2 WHERE
     S1 /\ S2 = {} & S1 \/ S2 = D_(L_H,L_G,sigma) &
     DAmCoobservability_e(A_d,sigma,L_H,E_L_H_sigma,{S1, S2}) THEN
       code := 1 || PRINT("K is D&A2-coobservable.") ||
                    PRINT(S1) || PRINT(S2) END END;

 FindPartitionForDA3Coobservability =  // this operation is enabled w.r.t. ex. 3.5.1 and
  VAR E_L_H_sigma IN                   // ex. 3.4.1 (since the previous one is enabled
   E_L_H_sigma := E_(L_H,sigma);       // w.r.t. ex. 3.4.1, it gives the same partition)
    ANY S1, S2, S3 WHERE
     S1 /\ S2 = {} & S1 /\ S3 = {} & S2 /\ S3 = {} & S1 \/ S2 \/ S3 = D_(L_H,L_G,sigma) &
     DAmCoobservability_e(A_d,sigma,L_H,E_L_H_sigma,{S1, S2, S3}) THEN
       code := 1 || PRINT("K is D&A3-coobservable.") ||
                    PRINT(S1) || PRINT(S2) || PRINT(S3) END END;

 VerifyCP1CoobservabilityEx3_4_1 =
  SELECT CPmCoobservability(A_d,A_d'Events_ce,L_G,L_H,{(sigma,{{[b1,a2],[c2,a1,a2],[c2,a1,b2,d1],[b1,b2,d1],[a1,a2,d1],[d2,b1,a2,d1]}})}) THEN
   code := 1 || PRINT("K is C&P1-coobservable.") ELSE
   code := 0 || PRINT("K is not C&P1-coobservable.") END;       // the answer for ex. 3.4.1 and ex. 3.5.1

 VerifyCP3CoobservabilityEx3_4_1 =
  SELECT CPmCoobservability(A_d,A_d'Events_ce,L_G,L_H,{(sigma,{{[d2,b1,a2,d1],[a1,a2,d1],[b1,b2,d1],[c2,a1,b2,d1]},{[b1,a2]},{[c2,a1,a2]}})}) THEN
   code := 1 || PRINT("K is C&P3-coobservable.") ELSE           // the answer for ex. 3.4.1 (the one generated by FindPartitionForCP3Coobservability)
   code := 0 || PRINT("K is not C&P3-coobservable.") END;       // the answer for ex. 3.5.1

 VerifyDA2Coobservability1 =
  SELECT DAmCoobservability(A_d,A_d'Events_cd,L_H,{(sigma,{{[b1,b2],[d2,b1,a2],[d2,b1,b2],[b1,b2,c1]},{[a1,a2],[a1,b2],[c2,a1,b2],[c2,a1,b2,c1],[d2,b1,a2,c1],[a1,a2,c1]}})}) THEN
   code := 1 || PRINT("K is D&A2-coobservable.") ELSE           // the answer for ex. 3.4.1 (the one generated by FindPartitionForDA2Coobservability)
   code := 0 || PRINT("K is not D&A2-coobservable.") END;       // the answer for ex. 3.5.1

 VerifyDA3CoobservabilityEx3_4_1 =
  SELECT DAmCoobservability(A_d,A_d'Events_cd,L_H,{(sigma,{{[d2,b1,a2,d1],[a1,a2,d1],[b1,b2,d1],[c2,a1,b2,d1]},{[b1,a2]},{[c2,a1,a2]}})}) THEN
   code := 1 || PRINT("K is D&A3-coobservable for ex. 3.5.1.") ELSE  // the answer for ex.3.5.1
   code := 0 || PRINT("K is not D&A3-coobservable with the same partition for verifying CP3CoobservabilityEx3_4_1.") END;   // the answer for ex 3.4.1


 VerifyCP2Coobservability1 =
  SELECT CPmCoobservability(A_d,A_d'Events_ce,L_G,L_H,{(sigma,{{[b1,b2],[d2,b1,a2],[d2,b1,b2],[b1,b2,c1]},{[a1,a2],[a1,b2],[c2,a1,b2],[c2,a1,b2,c1],[d2,b1,a2,c1],[a1,a2,c1]}})}) THEN
   code := 1 || PRINT("K is C&P2-coobservable.") ELSE           // the answer for ex. 3.5.1 (FindPartitionForCP2Coobservability)
   code := 0 || PRINT("K is not C&P2-coobservable with the same partition for verifying DA2Coobservability1.") END;    // the answer for ex 3.4.1

 VerifyDA3CoobservabilityEx3_5_1 =
  SELECT DAmCoobservability(A_d,A_d'Events_cd,L_H,{(sigma,{{[b1,a2]},{[a1,a2,d1],[b1,b2,d1],[d2,b1,a2,d1],[c2,a1,b2,d1]},{[c2,a1,a2]}})}) THEN
   code := 1 || PRINT("K is D&A3-coobservable.") ELSE           // the answer for ex.3.5.1 (the one generated by FindPartitionForDA3Coobservability)
   code := 0 || PRINT("K is not D&A3-coobservable.") END;       // the answer for ex. 3.4.1

 VerifyCP2Coobservability2 =
  SELECT CPmCoobservability(A_d,A_d'Events_ce,L_G,L_H,{(sigma,{{[b1,b2],[d2,b1,a2],[d2,b1,b2],[b1,b2,c1]},{[a1,a2],[a1,b2],[c2,a1,b2],[c2,a1,b2,c1],[d2,b1,a2,c1],[a1,a2,c1]}})}) THEN
   code := 1 || PRINT("K is C&P2-coobservable.") ELSE           // the answer for ex.3.5.1 (the one generated by FindPartitionForCP2Coobservability)
   code := 0 || PRINT("K is not C&P2-coobservable.") END;       // the answer for ex. 3.4.1

 VerifyCP3CoobservabilityEx3_5_1 =
  SELECT CPmCoobservability(A_d,A_d'Events_ce,L_G,L_H,{(sigma,{{[b1,a2]},{[a1,a2,d1],[b1,b2,d1],[d2,b1,a2,d1],[c2,a1,b2,d1]},{[c2,a1,a2]}})}) THEN
   code := 1 || PRINT("K is C&P3-coobservable.") ELSE           // the answer for ex.3.4.1
   code := 0 || PRINT("K is not C&P3-coobservable with the same partition for verifying DA3CoobservabilityEx3_5_1.") END;   // the answer for ex.3.5.1

 VerifyDA2Coobservability2=
  SELECT DAmCoobservability(A_d,A_d'Events_cd,L_H,{(sigma,{{[b1,b2],[d2,b1,a2],[d2,b1,b2],[b1,b2,c1]},{[a1,a2],[a1,b2],[c2,a1,b2],[c2,a1,b2,c1],[d2,b1,a2,c1],[a1,a2,c1]}})}) THEN
   code := 1 || PRINT("K is D&A2-coobservable.") ELSE      // the answer for ex. 3.4.1
   code := 0 || PRINT("K is not D&A2-coobservable with the same partition for verifying CP2Coobservability.") END           // the answer for ex.3.5.1
END